name: build-deploy
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    strategy:
    matrix:
      server: [TW, JP]
    env:
      ENV_PRODUCTION: "true"
      UPDATE_ENABLED: "false"
      ENABLE_CARDLE_GENERATION: "false"
    steps:
      - name: Set host based on region
        run: |
          if [ "${{ matrix.server }}" == "TW" ]; then
            echo "DEPLOY_HOST=${{ secrets.API_SERVER_TW }}" >> $GITHUB_ENV
          elif [ "${{ matrix.server }}" == "JP" ]; then
            echo "DEPLOY_HOST=${{ secrets.API_SERVER_JP }}" >> $GITHUB_ENV
          fi

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.run_id }}
          path: dist/

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Create .env file
        run: |
          cat > dist/.env << 'EOF'
          DATABASE_TYPE="${{ secrets.DATABASE_TYPE }}"
          DATABASE_USERNAME="${{ secrets.DATABASE_USERNAME }}"
          DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          DATABASE_HOST="${{ secrets.DATABASE_HOST }}"
          DATABASE_PORT="${{ secrets.DATABASE_PORT }}"
          DATABASE_NAME="${{ secrets.DATABASE_NAME }}"
          ENV_PRODUCTION="${{ env.ENV_PRODUCTION }}"
          UPDATE_ENABLED="${{ env.UPDATE_ENABLED }}"
          ENABLE_CARDLE_GENERATION="${{ env.ENABLE_CARDLE_GENERATION }}"
          EOF

      - name: Deploy to VM-${{ matrix.server }}
        env:
          API_SERVER_USER: ${{ secrets.API_SERVER_USER }}
          DEPLOYMENT_PATH: ${{ secrets.DEPLOYMENT_PATH }}
        run: |
          ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
          scp -r dist/* "$API_SERVER_USER@$DEPLOY_HOST:$DEPLOYMENT_PATH"
          ssh "$API_SERVER_USER@$DEPLOY_HOST" << 'EOF'
            cd "$DEPLOYMENT_PATH"
            npm install --production || exit 1
            pm2 restart 0 || exit 1
          EOF